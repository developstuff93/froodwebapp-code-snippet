import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import { Row, Col } from 'react-flexbox-grid';
import { reduxForm, Field } from 'redux-form';
import { connect } from 'react-redux';
import {
  FormInput,
  FormSelect,
  Controls
} from 'components';
import { OpenIcon, CloseIcon } from 'icons';
import {
  itemInfoSaveRequest,
  itemInfoUpdateRequest,
  uomGetRequest
} from 'redux-base/actions';
import { Spin } from 'antd';
import { getMenuItems } from 'utils';
import ProductVariants from './ProductVariants';
import styles from '../../Item.scss';

const mapStateToProps = state => ({
  loadingPage: state.item.loadingPage,
  loadingUoms: state.uom.loadingPage,
  itemInfo: state.item.itemInfo,
  countries: state.commonData.countries,
  categories: state.commonData.categories,
  taxCategories: state.commonData.taxCategories,
  defaultLocations: state.commonData.defaultLocations,
  uoms: state.uom.data
});

const mapDispatchToProps = {
  itemInfoSaveRequest,
  itemInfoUpdateRequest,
  uomGetRequest
};

const reduxFormConfig = {
  form: 'inventoryMainForm',
  enableReinitialize: true
};

class MainTab extends PureComponent {
  constructor(props) {
    super(props);
    this.state = {
      productVariantsVisible: false,
      productOptions: [],
      productVariants: []
    };
  }

  componentDidMount() {
    if (this.props.isNewSkuItem) {
      this.props.uomGetRequest();
    }
  }

  handleSave = (formData) => {
    this.props.itemInfoSaveRequest({
      payload: {
        name: formData.name,
        sku: formData.sku,
        brand: formData.brand,
        categoryId: formData.categoryId,
        taxCategoryId: formData.taxCategoryId,
        uomId: formData.uomId,
        defaultLocationId: formData.defaultLocationId,
        originCountryId: formData.originCountryId,
        options: this.state.productOptions.map(po => ({
          key: po.key,
          values: po.values
        })),
        variants: this.state.productVariants.map(pv => ({
          name: pv.name,
          sku: pv.sku,
          children: pv.name.split('/')
        }))
      }
    });
  }

  handleUpdateProductData = (productOptions, productVariants) => {
    this.setState({
      productOptions,
      productVariants
    });
  }

  handleToggleProductVariants = () => {
    this.setState({
      productVariantsVisible: !this.state.productVariantsVisible
    });
  }

  render() {
    const {
      productVariantsVisible,
      productOptions,
      productVariants
    } = this.state;

    const {
      // form
      handleSubmit,
      // triggers
      loadingPage,
      loadingUoms,
      // static data
      categories,
      taxCategories,
      uoms,
      defaultLocations,
      countries,
    } = this.props;

    return (
      <Spin spinning={ loadingPage || loadingUoms }>
        <form
          className={ styles.form }
          onSubmit={ handleSubmit(this.handleSave) }
        >
          <Row center="xs">
            <Col xs md lg={ 6 }>
              <Row center="xs" middle="xs">
                <Col xs md={ 2 } lg={ 3 }>
                  <label>Product Name</label>
                </Col>
                <Col xs md={ 6 } lg={ 5 }>
                  <Field
                    name="name"
                    placeholder="Required"
                    type="text"
                    component={ FormInput }
                  />
                </Col>
              </Row>
              <Row center="xs" middle="xs">
                <Col xs md={ 2 } lg={ 3 }>
                  <label>SKU</label>
                </Col>
                <Col xs md={ 6 } lg={ 5 }>
                  <Field
                    name="sku"
                    placeholder="Autogenerated or Manual (Required)"
                    component={ FormInput }
                  />
                </Col>
              </Row>
              <Row center="xs" middle="xs">
                <Col xs md={ 2 } lg={ 3 }>
                  <label>Brand</label>
                </Col>
                <Col xs md={ 6 } lg={ 5 }>
                  <Field
                    name="brand"
                    placeholder="Optional"
                    component={ FormInput }
                  />
                </Col>
              </Row>
              <Row center="xs" middle="xs">
                <Col xs md={ 2 } lg={ 3 }>
                  <label>Product Category</label>
                </Col>
                <Col xs md={ 6 } lg={ 5 }>
                  <Field
                    name="categoryId"
                    placeholder="Add new category if not found"
                    component={ FormSelect }
                    mode="combobox"
                    menuItems={ getMenuItems(categories) }
                  />
                </Col>
              </Row>
              <Row center="xs" middle="xs">
                <Col xs md={ 2 } lg={ 3 }>
                  <label>Tax Category</label>
                </Col>
                <Col xs md={ 6 } lg={ 5 }>
                  <Field
                    name="taxCategoryId"
                    placeholder="Add new category if not found"
                    component={ FormSelect }
                    mode="combobox"
                    menuItems={ getMenuItems(taxCategories) }
                  />
                </Col>
              </Row>
              <Row center="xs" middle="xs">
                <Col xs md={ 2 } lg={ 3 }>
                  <label>Default Sell UOM</label>
                </Col>
                <Col xs md={ 6 } lg={ 5 }>
                  <Field
                    name="uomId"
                    component={ FormSelect }
                    mode="combobox"
                    placeholder="Choose UOM"
                    menuItems={ getMenuItems(uoms) }
                  />
                </Col>
              </Row>
              <Row center="xs" middle="xs">
                <Col xs md={ 2 } lg={ 3 }>
                  <label>Default Location</label>
                </Col>
                <Col xs md={ 6 } lg={ 5 }>
                  <Field
                    name="defaultLocationId"
                    component={ FormSelect }
                    placeholder="Choose location"
                    mode="combobox"
                    menuItems={ getMenuItems(defaultLocations) }
                  />
                </Col>
              </Row>
              <Row center="xs" middle="xs">
                <Col xs md={ 2 } lg={ 3 }>
                  <label>Country Of Origin</label>
                </Col>
                <Col xs md={ 6 } lg={ 5 }>
                  <Field
                    name="originCountryId"
                    placeholder="Choose country"
                    component={ FormSelect }
                    mode="combobox"
                    menuItems={ getMenuItems(countries) }
                  />
                </Col>
              </Row>
            </Col>
          </Row>

          <Row center="xs" middle="xs">
            <Col xs md={ 2 } lg={ 5 }>
              { productVariantsVisible &&
                <CloseIcon
                  onClick={ this.handleToggleProductVariants }
                />
              }
              { !productVariantsVisible &&
                <OpenIcon
                  onClick={ this.handleToggleProductVariants }
                />
              }
              <span className={ styles.productVariantsTitle }>
                Product Variants
              </span>
            </Col>
            <Col xs md={ 6 } lg={ 3 } />
          </Row>
          { productVariantsVisible &&
            <ProductVariants
              productOptions={ productOptions }
              productVariants={ productVariants }
              handleUpdateProductData={ this.handleUpdateProductData }
            />
          }
          <Controls submit />
        </form>
      </Spin>
    );
  }
}

MainTab.propTypes = {
  // triggers
  loadingPage: PropTypes.bool.isRequired,
  loadingUoms: PropTypes.bool.isRequired,
  isNewSkuItem: PropTypes.bool.isRequired,
  // data
  itemInfo: PropTypes.object,
  skuItemId: PropTypes.string,
  // static data
  countries: PropTypes.array.isRequired,
  categories: PropTypes.array.isRequired,
  taxCategories: PropTypes.array.isRequired,
  defaultLocations: PropTypes.array.isRequired,
  uoms: PropTypes.array.isRequired,
  // redux-base
  itemInfoSaveRequest: PropTypes.func.isRequired,
  itemInfoUpdateRequest: PropTypes.func.isRequired,
  uomGetRequest: PropTypes.func.isRequired,
  // redux-form
  handleSubmit: PropTypes.func.isRequired,
};

export default connect(mapStateToProps, mapDispatchToProps)(reduxForm(reduxFormConfig)(MainTab));
